{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport ticketService from './ticketService';\nconst initialState = {\n  tickets: [],\n  ticket: {},\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // Create new ticket\n\nexport const createTicket = createAsyncThunk('tickets/create', async (ticketData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.createTicket(ticketData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Get user tickets\n\nexport const getTickets = createAsyncThunk('tickets/getAll', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.getTickets(token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Get user ticket\n\nexport const getTicket = createAsyncThunk('tickets/get', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.getTicket(ticketId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Close ticket\n\nexport const closeTicket = createAsyncThunk('tickets/close', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await ticketService.closeTicket(ticketId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const ticketSlice = createSlice({\n  name: 'ticket',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createTicket.pending, state => {\n      state.isLoading = true;\n    }).addCase(createTicket.fulfilled, state => {\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(createTicket.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getTickets.pending, state => {\n      state.isLoading = true;\n    }).addCase(getTickets.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.tickets = action.payload;\n    }).addCase(getTickets.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getTicket.pending, state => {\n      state.isLoading = true;\n    }).addCase(getTicket.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.ticket = action.payload;\n    }).addCase(getTicket.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(closeTicket.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.tickets.map(ticket => ticket._id === action.payload._id ? ticket.status = 'closed' : ticket);\n    });\n  }\n});\nexport const {\n  reset\n} = ticketSlice.actions;\nexport default ticketSlice.reducer;","map":{"version":3,"sources":["F:/Support-Desk-MERN/support-desk/frontend/src/features/tickets/ticketSlice.js"],"names":["createSlice","createAsyncThunk","ticketService","initialState","tickets","ticket","isError","isSuccess","isLoading","message","createTicket","ticketData","thunkAPI","token","getState","auth","user","error","response","data","toString","rejectWithValue","getTickets","_","getTicket","ticketId","closeTicket","ticketSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","rejected","action","payload","map","_id","status","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport ticketService from './ticketService'\r\n\r\nconst initialState = {\r\n  tickets: [],\r\n  ticket: {},\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n}\r\n\r\n// Create new ticket\r\nexport const createTicket = createAsyncThunk(\r\n  'tickets/create',\r\n  async (ticketData, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.createTicket(ticketData, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\n// Get user tickets\r\nexport const getTickets = createAsyncThunk(\r\n  'tickets/getAll',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.getTickets(token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\n// Get user ticket\r\nexport const getTicket = createAsyncThunk(\r\n  'tickets/get',\r\n  async (ticketId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.getTicket(ticketId, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\n// Close ticket\r\nexport const closeTicket = createAsyncThunk(\r\n  'tickets/close',\r\n  async (ticketId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await ticketService.closeTicket(ticketId, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\nexport const ticketSlice = createSlice({\r\n  name: 'ticket',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createTicket.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(createTicket.fulfilled, (state) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n      })\r\n      .addCase(createTicket.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n      })\r\n      .addCase(getTickets.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getTickets.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.tickets = action.payload\r\n      })\r\n      .addCase(getTickets.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n      })\r\n      .addCase(getTicket.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getTicket.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.ticket = action.payload\r\n      })\r\n      .addCase(getTicket.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n      })\r\n      .addCase(closeTicket.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.tickets.map((ticket) =>\r\n          ticket._id === action.payload._id\r\n            ? (ticket.status = 'closed')\r\n            : ticket\r\n        )\r\n      })\r\n  },\r\n})\r\n\r\nexport const { reset } = ticketSlice.actions\r\nexport default ticketSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}