{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport noteService from './noteService';\nconst initialState = {\n  notes: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // Get ticket notes\n\nexport const getNotes = createAsyncThunk('notes/getAll', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.getNotes(ticketId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Create ticket note\n\nexport const createNote = createAsyncThunk('notes/create', async (_ref, thunkAPI) => {\n  let {\n    noteText,\n    ticketId\n  } = _ref;\n\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.createNote(noteText, ticketId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = action.payload;\n    }).addCase(getNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes.push(action.payload);\n    }).addCase(createNote.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"sources":["F:/Support-Desk-MERN/support-desk/frontend/src/features/notes/noteSlice.js"],"names":["createSlice","createAsyncThunk","noteService","initialState","notes","isError","isSuccess","isLoading","message","getNotes","ticketId","thunkAPI","token","getState","auth","user","error","response","data","toString","rejectWithValue","createNote","noteText","noteSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","push","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport noteService from './noteService'\r\n\r\nconst initialState = {\r\n  notes: [],\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n}\r\n\r\n// Get ticket notes\r\nexport const getNotes = createAsyncThunk(\r\n  'notes/getAll',\r\n  async (ticketId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await noteService.getNotes(ticketId, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\n// Create ticket note\r\nexport const createNote = createAsyncThunk(\r\n  'notes/create',\r\n  async ({ noteText, ticketId }, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token\r\n      return await noteService.createNote(noteText, ticketId, token)\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n  }\r\n)\r\n\r\nexport const noteSlice = createSlice({\r\n  name: 'note',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getNotes.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getNotes.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.notes = action.payload\r\n      })\r\n      .addCase(getNotes.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n      })\r\n      .addCase(createNote.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(createNote.fulfilled, (state, action) => {\r\n        state.isLoading = false\r\n        state.isSuccess = true\r\n        state.notes.push(action.payload)\r\n      })\r\n      .addCase(createNote.rejected, (state, action) => {\r\n        state.isLoading = false\r\n        state.isError = true\r\n        state.message = action.payload\r\n      })\r\n  },\r\n})\r\n\r\nexport const { reset } = noteSlice.actions\r\nexport default noteSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}